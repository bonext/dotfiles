                ; left side
                
(defwidget leftside []
   (box :class "leftside-container"
        :orientation "horizontal"
        :halign "start"
        (workspaces)))

;; workspace switcher
(defwidget workspaces []
   (box :class "workspaces-widget"
        :orientation "horizontal"
        :spacing 8
        (button
        :onclick "hyprctl dispatch workspace 1"
        "")
        (button
        :onclick "hyprctl dispatch workspace 2"
        "")
        (button
        :onclick "hyprctl dispatch workspace 3"
        "")
        (button
        :onclick "hyprctl dispatch workspace 4"
        "-")
        (button
        :onclick "hyprctl dispatch workspace 5"
        "-")
        (button
        :onclick "hyprctl dispatch workspace 6"
        "-")
        (button
        :onclick "hyprctl dispatch workspace 7"
        "-")
        (button
        :onclick "hyprctl dispatch workspace 8"
        "-")
        (button
        :onclick "hyprctl dispatch workspace 9"
        "")
        (button
        :onclick "hyprctl dispatch workspace 10"
        "")))
        

                ; center

;; TODO: what shall we put here?
(defwidget center []
   (box :class "center-container"
        :orientation "horizontal"
        :hexpand true))   


                ; right side

(defwidget rightside []
   (box :class "rightside-container"
        :orientation "horizontal"
        :space-evenly false
        :spacing 16
        :halign "end"
        :valign "baseline"
         (dropbox)
         (network)
        (keyboard_layout)
        (battery)
        (datetime_widget)))
                
;; keyboard_layout widget
(defvar current_layout "en")
(defwidget keyboard_layout []
           (box :class "layout-widget"
                :orientation "h"
                :hexpand false
                :valign "baseline"
                 (label :class "layout-title"
                         :halign "end"
                         :valign "baseline"
                          :text current_layout)))

;; battery widget
;; TODO: refactor ugly separation
(defwidget _battery [battery status charge empty almost-empty about-half almost-full full]
   (label :class "battery-icon"
          :halign "end"
          :text {status == 'Charging' ? charge :
                 battery < 10 ? empty :
                 battery < 30 ? almost-empty :
                 battery < 60 ? about-half :
                 battery < 90 ? almost-full : full}))

(defwidget battery []
   (_battery :status {EWW_BATTERY.CMB1.status}
             :battery {EWW_BATTERY.total_avg}
             ;; beware: these symbols take up extra space
             ;; so right quote is not visible (but present)
             :charge "ﮣ"
             :empty ""
             :almost-empty ""
             :about-half ""
             :almost-full ""
             :full ""))

;; datetime widget
(defpoll date :interval "1s" "date '+%b %d, %Y'")
(defpoll time :interval "1s" "date '+ %R'")   
(defwidget datetime_widget []
   (box :class "datetime-widget"
        :orientation "horizontal"
        :halign "end"
        :valign "baseline"
        :space-evenly false
        :spacing 8
        time
        date))

;; Wireless widget
;; offline + signal strength
(defpoll netinfo-json :interval "30s"
         `nmcli -t -f SSID,SIGNAL,ACTIVE --color no device wifi \
         | grep -e '.*:yes$' \
         | sed --regexp-extended -e 's/(.*):([0-9]+):yes$/{"ssid": "\\1", "signal": "\\2"}/'`)
(defwidget _network [strength offline excellent
                    good okay slow]
  (box :class "network-icon"
       :space-evenly false
       :spacing 8
    (label :text {strength == "" ? offline :
      strength < 26 ? slow :
        strength < 51 ? okay :
          strength < 76 ? good : excellent})))
(defwidget network []
  (box :class "network-widget"
        :orientation "horizontal"
        :halign "end"
        :valign "baseline"
        :space-evenly false
        :spacing 8
        (label :class "network-icon"
               :halign "end"
               :text "")
        (label :class "network-name"
                :halign "end"
                :text " ${netinfo-json.ssid}")
        (_network
                :strength {netinfo-json.signal}
                :offline "ﲁ"
                :excellent ""
                :good ""
                :okay ""
                :slow "")))

;; Dropbox widget
;; dropbox-cli status: "Connecting...", "Syncing...", "Up to date"
;; rest are considered broken
(defpoll dropbox-status :interval "10s" `dropbox-cli status`)
(defwidget _dropbox [status broken connecting syncing ok]
  (box :class "dropbox-icon"
        :space-evenly false
         :spacing 8
          (label :text {status == "Up to date" ? ok :
                               status == "Syncing..." ? syncing :
                               status == "Connecting..." ? connecting :
                               broken})))

(defwidget dropbox []
  (box :class "dropbox-widget"
        :orientation "horizontal"
         :halign "end"
          :valign "baseline"
           :space-evenly false
            :spacing 8
             (label :class "dropbox-icon"
                     :halign "end"
                      :text "")
             (_dropbox
              :status dropbox-status
              :broken ""
              :connecting "裏"
              :syncing "痢"
              :ok "")))


                ; status bar general
(defwidget statusbar []
   (box :class "statusbar-box"
        :orientation "horizontal"
        :hexpand false
        :width "100%"
        :halign "fill"
        :valign "baseline"
        (leftside)
        (center)
        (rightside)))

(defwindow statusbar
   :monitor 0 ; how do I put it on every monitor?
   :exclusive true
   :stacking "overlay" ; this probably does not really matter
   :focusable false ; matters for keyboard inputs
   ; geometry
   ; I have to use pixels for height, because I reserve this space in hyprland
   :geometry (geometry :x "0"
               :y "0"
              :width "100%"
              :height "32")
   (statusbar))
